= MIDI Message

{pic}[http://images.treetrouble.net/images/mks80_small.jpg]

MIDI messages, objectified in Ruby

== Features

* All message types
* API flexibility to accommodate many uses
* Simplified approach to System Exclusive data and devices
* YAML dictionary of MIDI constants
	
== Install

  gem install midi-message

== Usage

  require 'midi-message'
  
  include MIDIMessage
  
=== Basic Messages

There are a few ways to create a new MIDI message.  Here are examples of each going from low to high-level
    
  MIDIMessage.parse(0x90, 0x40, 0x40)
  
  ChannelMessage.new(0x9, 0x0, 0x40, 0x40).to_type
  
  ChannelMessage.new(MIDIMessage::Status["Note On"], 0x0, 0x40, 0x40).to_type
  
  NoteOn.new(0, 64, 64) # or NoteOn.new(0x0, 0x64, 0x64)
  
  NoteOn["E4"].new(0, 100)

Those expressions all evaluate to the same object

  #<MIDIMessage::NoteOn:0x9c1c240
   @channel=0,
   @data=[64, 64],
   @name="E4",
   @note=64,
   @status=[9, 0],
   @velocity=64,
   @verbose_name="Note On: E4">

=== SysEx Messages (read more {here}[http://github.com/arirusso/midi-message/blob/master/examples/sysex.rb])

You can parse raw data

  MIDIMessage.parse(0xF0, 0x41, 0x10, 0x42, 0x12, 0x40, 0x00, 0x7F, 0x00, 0x41, 0xF7)
  
Or in a more object oriented way
  
  synth = SystemExclusive::Node.new(0x41, 0x42, :device_id => 0x10)
    
  SystemExclusive::Command.new([0x40, 0x7F, 0x00], 0x00, :node => synth)
  
A Node represents a device that you're sending a message to (eg. your {Yamaha DX7}[bit.ly/iH4TzL] is a Node).  Sysex messages can either be a Command or Request
  
You can use the Node to instantiate a message
  
  synth.command([0x40, 0x7F, 0x00], 0x00)
   
Or pass it a prototype message object
  
  prototype = SystemExclusive::Command.new([0x40, 0x7F, 0x00], 0x00)
    
  synth.new_message_from(prototype)  
  
No matter which of these methods you use, you will wind up with a set of objects like this

   #<MIDIMessage::SystemExclusive::Command:0x9c1e57c
   @address=[64, 0, 127],
   @checksum=[65],
   @data=[0],
   @node=
    #<MIDIMessage::SystemExclusive::Node:0x9c1e5a4
     @device_id=16,
     @manufacturer=65,
     @model_id=66>>

See these, more examples and more explanation {here}[http://github.com/arirusso/midi-message/tree/master/examples]

Have a look at {unimidi}[http://github.com/arirusso/unimidi] (which I also wrote) if you want to send and receive these messages with your synths/sequencers/etc.  I'm working on another library to streamline the two together

== API Documentation

* {rdoc}[http://rdoc.info/gems/midi-message]

== Author

* {Ari Russo}[http://github.com/arirusso] <ari.russo at gmail.com>

== License

Apache 2.0, See the file LICENSE

Copyright (c) 2011 Ari Russo
